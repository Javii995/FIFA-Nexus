<!-- views/blacklisted-clubs.ejs -->
<!DOCTYPE html>
<html lang="nl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/styles.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</head>

<body>
    <header class="header">
        <nav class="navbar">
            <a href="/dashboard"><div class="logo">FIFA Nexus</div></a>
            <div class="nav-links">
                <a href="/dashboard"><i class="fas fa-home"></i> Home</a>
                <a href="/favorite-clubs"><i class="fas fa-star"></i> Favoriete Clubs</a>
                <a href="/blacklisted-clubs"><i class="fas fa-ban"></i> Blacklisted Clubs</a>
                <a href="/favorite-league"><i class="fas fa-trophy"></i> Favoriete League</a>
                <a href="/quiz"><i class="fas fa-question-circle"></i> Quiz</a>
                <a href="#" id="logoutBtn"><i class="fas fa-sign-out-alt"></i> Uitloggen</a>
            </div>
        </nav>
    </header>
    
    <main class="container">
        <h1>ðŸš« Blacklisted Clubs ðŸš«</h1>
        <p>Hier zie je een overzicht van de clubs die je hebt geblacklist. Je kunt de reden bewerken of clubs verwijderen.</p>
        
        <div class="grid" id="blacklistedClubsGrid">
            <!-- Blacklisted clubs worden hier geladen -->
        </div>

        <!-- Edit Reason Modal -->
        <div class="modal" id="editReasonModal" style="display: none;">
            <div class="modal-content">
                <span class="close-modal" id="closeEditModal">&times;</span>
                <h3>Reden voor blacklist bewerken</h3>
                <p id="editClubName" style="margin-bottom: 1rem; font-weight: bold;"></p>
                <textarea id="editReasonText" placeholder="Voer je nieuwe reden in..." maxlength="200"></textarea>
                <div style="text-align: right; font-size: 0.8rem; color: #ccc; margin-top: 0.5rem;">
                    <span id="reasonCharCount">0</span>/200 karakters
                </div>
                <div class="modal-actions">
                    <button id="saveReasonBtn" class="gradient-button">Opslaan</button>
                    <button id="cancelEditBtn" class="gradient-button">Annuleren</button>
                </div>
            </div>
        </div>

        <!-- No Blacklisted Message -->
        <div class="no-blacklisted" id="noBlacklistedMessage" style="display: none;">
            <p>Je hebt nog geen clubs geblacklist.</p>
            <p>Speel de <a href="/quiz">Quiz</a> om clubs te blacklisten!</p>
        </div>

        <!-- Loading indicator -->
        <div id="loadingIndicator" style="display: none; text-align: center; padding: 2rem;">
            <p>Laden...</p>
        </div>
    </main>
    
    <footer class="footer">
        <p>&copy; 2025 FIFA Nexus. Alle rechten voorbehouden.</p>
    </footer>

    <script>
    let currentEditingClub = null;

    // Helper functies
    function getToken() {
        return localStorage.getItem('fifaNexusToken');
    }

    async function apiCall(endpoint, method = 'GET', data = null) {
        const token = getToken();
        const options = {
            method,
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        };

        if (data) {
            options.body = JSON.stringify(data);
        }

        const response = await fetch(endpoint, options);
        return await response.json();
    }

    function showMessage(message, type = 'success') {
        // Simpele alert - je kunt dit vervangen door een mooiere toast
        if (type === 'error') {
            alert('Fout: ' + message);
        } else {
            console.log(message);
        }
    }

    function showLoading(show = true) {
        document.getElementById('loadingIndicator').style.display = show ? 'block' : 'none';
    }

    // Uitloggen
    document.getElementById('logoutBtn').addEventListener('click', async (e) => {
        e.preventDefault();
        localStorage.removeItem('fifaNexusToken');
        try {
            await fetch('/api/auth/logout', { method: 'POST' });
        } catch (error) {
            console.error('Logout error:', error);
        }
        window.location.href = '/login';
    });

    // Laad blacklisted clubs
    async function loadBlacklistedClubs() {
        try {
            showLoading(true);
            const result = await apiCall('/api/blacklist');
            
            if (result.success) {
                displayBlacklistedClubs(result.blacklistedClubs);
            } else {
                showMessage(result.message || 'Fout bij laden blacklisted clubs', 'error');
            }
        } catch (error) {
            console.error('Fout bij laden blacklisted clubs:', error);
            showMessage('Er is een fout opgetreden bij het laden van je blacklisted clubs', 'error');
        } finally {
            showLoading(false);
        }
    }

    // Toon blacklisted clubs
    function displayBlacklistedClubs(clubs) {
        const grid = document.getElementById('blacklistedClubsGrid');
        grid.innerHTML = '';

        if (clubs.length === 0) {
            document.getElementById('noBlacklistedMessage').style.display = 'block';
            return;
        }

        document.getElementById('noBlacklistedMessage').style.display = 'none';

        clubs.forEach(club => {
            const clubCard = createBlacklistedClubCard(club);
            grid.appendChild(clubCard);
        });
    }

    // Maak blacklisted club card
    function createBlacklistedClubCard(club) {
        const card = document.createElement('div');
        card.className = 'card blacklisted-card';
        card.dataset.clubId = club.id;

        card.innerHTML = `
            <div class="image">
                <img src="${club.logo}" alt="${club.name}" onerror="this.src='/images/default-club.png'">
                <div class="overlay">
                    <h3>${club.name}</h3>
                    <p>${club.country}</p>
                </div>
            </div>
            <div class="club-details">
                <h3>${club.name}</h3>
                <p><strong>Land:</strong> ${club.country}</p>
                <p><strong>League:</strong> ${club.league}</p>
                <p><strong>Reden:</strong> <span class="reason-text">${club.reason}</span></p>
                <div class="actions">
                    <button class="edit-reason-btn gradient-button" title="Bewerk reden">
                        <i class="fas fa-edit"></i> Bewerk reden
                    </button>
                    <button class="remove-blacklist-btn gradient-button" title="Verwijder uit blacklist" style="background: #ff4444;">
                        <i class="fas fa-trash"></i> Verwijderen
                    </button>
                </div>
            </div>
        `;

        // Event listeners
        const editBtn = card.querySelector('.edit-reason-btn');
        editBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            openEditReasonModal(club);
        });

        const removeBtn = card.querySelector('.remove-blacklist-btn');
        removeBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            removeFromBlacklist(club.id, club.name);
        });

        return card;
    }

    // Open edit reason modal
    function openEditReasonModal(club) {
        currentEditingClub = club;
        
        document.getElementById('editClubName').textContent = club.name;
        document.getElementById('editReasonText').value = club.reason;
        updateCharacterCount();
        document.getElementById('editReasonModal').style.display = 'block';
    }

    // Update character count
    function updateCharacterCount() {
        const textarea = document.getElementById('editReasonText');
        const countElement = document.getElementById('reasonCharCount');
        countElement.textContent = textarea.value.length;
        
        // Verander kleur bij bijna vol
        if (textarea.value.length > 180) {
            countElement.style.color = '#ff6666';
        } else if (textarea.value.length > 150) {
            countElement.style.color = '#ffaa00';
        } else {
            countElement.style.color = '#ccc';
        }
    }

    // Verwijder club van blacklist
    async function removeFromBlacklist(clubId, clubName) {
        if (!confirm(`Weet je zeker dat je ${clubName} wilt verwijderen uit de blacklist?`)) {
            return;
        }

        try {
            const result = await apiCall(`/api/blacklist/${clubId}`, 'DELETE');
            
            if (result.success) {
                showMessage(result.message);
                loadBlacklistedClubs(); // Herlaad blacklist
            } else {
                showMessage(result.message || 'Fout bij verwijderen uit blacklist', 'error');
            }
        } catch (error) {
            console.error('Fout bij verwijderen uit blacklist:', error);
            showMessage('Er is een fout opgetreden', 'error');
        }
    }

    // Update blacklist reason
    async function updateBlacklistReason() {
        const newReason = document.getElementById('editReasonText').value.trim();
        
        if (!newReason) {
            showMessage('Voer een geldige reden in', 'error');
            return;
        }

        if (!currentEditingClub) {
            showMessage('Geen club geselecteerd', 'error');
            return;
        }

        try {
            const result = await apiCall(`/api/blacklist/${currentEditingClub.id}/reason`, 'PUT', {
                reason: newReason
            });
            
            if (result.success) {
                showMessage('Blacklist reden bijgewerkt');
                
                // Update de reden in de UI
                const clubCard = document.querySelector(`[data-club-id="${currentEditingClub.id}"]`);
                if (clubCard) {
                    clubCard.querySelector('.reason-text').textContent = newReason;
                }
                
                // Sluit modal
                document.getElementById('editReasonModal').style.display = 'none';
                currentEditingClub = null;
            } else {
                showMessage(result.message || 'Fout bij bijwerken reden', 'error');
            }
        } catch (error) {
            console.error('Fout bij bijwerken blacklist reden:', error);
            showMessage('Er is een fout opgetreden', 'error');
        }
    }

    // Event listeners
    document.getElementById('editReasonText').addEventListener('input', updateCharacterCount);

    document.getElementById('saveReasonBtn').addEventListener('click', updateBlacklistReason);

    document.getElementById('cancelEditBtn').addEventListener('click', () => {
        document.getElementById('editReasonModal').style.display = 'none';
        currentEditingClub = null;
    });

    document.getElementById('closeEditModal').addEventListener('click', () => {
        document.getElementById('editReasonModal').style.display = 'none';
        currentEditingClub = null;
    });

    // Modal sluiten bij klik buiten modal
    window.addEventListener('click', (e) => {
        const modal = document.getElementById('editReasonModal');
        if (e.target === modal) {
            modal.style.display = 'none';
            currentEditingClub = null;
        }
    });

    // Keyboard shortcuts in modal
    document.getElementById('editReasonText').addEventListener('keydown', (e) => {
        // Ctrl+Enter om op te slaan
        if (e.ctrlKey && e.key === 'Enter') {
            updateBlacklistReason();
        }
        // Escape om te annuleren
        if (e.key === 'Escape') {
            document.getElementById('editReasonModal').style.display = 'none';
            currentEditingClub = null;
        }
    });

    // Laad blacklisted clubs bij pagina load
    document.addEventListener('DOMContentLoaded', () => {
        loadBlacklistedClubs();
    });
    </script>
</body>
</html>